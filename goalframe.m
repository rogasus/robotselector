function [ig,jg,kg,kgarrow] = goalframe(goal)
%   Goal frame generator
%
%   ROBOT SELECTION TOOLS
%   https://robotselection.wordpress.com/
%
%   Tampere University of Technology
%
%   ANTTI RUOKONEN
%   antti.ruokone2@gmail.com
%
% This function creates goal frame vectors
% Input: goal matrix
% Output: goal frame vectors and arrow vector
%
% This tool is part of Master of Science thesis work
% Environment- and task-driven tool for selecting industrial robots

alpha = goal(4);
beta = goal(5);
gamma = goal(6);

% frame x vector
ig = [cos(alpha)*cos(beta)...
    cos(alpha)*sin(beta)*sin(gamma)-sin(alpha)*cos(gamma) ...
    cos(alpha)*sin(beta)*cos(gamma)+sin(alpha)*sin(gamma);...
    sin(alpha)*cos(beta)...
    sin(alpha)*sin(beta)*sin(gamma)+cos(alpha)*cos(gamma)...
    sin(alpha)*sin(beta)*cos(gamma)-cos(alpha)*sin(gamma);
    -sin(beta) ...
    cos(beta)*sin(gamma) ...
    cos(beta)*cos(gamma)]...
    *[50; 0; 0];

%frame y vector
jg = [cos(alpha)*cos(beta)...
    cos(alpha)*sin(beta)*sin(gamma)-sin(alpha)*cos(gamma) ...
    cos(alpha)*sin(beta)*cos(gamma)+sin(alpha)*sin(gamma);...
    sin(alpha)*cos(beta)...
    sin(alpha)*sin(beta)*sin(gamma)+cos(alpha)*cos(gamma)...
    sin(alpha)*sin(beta)*cos(gamma)-cos(alpha)*sin(gamma);
    -sin(beta) ...
    cos(beta)*sin(gamma) ...
    cos(beta)*cos(gamma)]...
    *[0; 50; 0];

%frame z vector
kg = [cos(alpha)*cos(beta)...
    cos(alpha)*sin(beta)*sin(gamma)-sin(alpha)*cos(gamma) ...
    cos(alpha)*sin(beta)*cos(gamma)+sin(alpha)*sin(gamma);...
    sin(alpha)*cos(beta)...
    sin(alpha)*sin(beta)*sin(gamma)+cos(alpha)*cos(gamma)...
    sin(alpha)*sin(beta)*cos(gamma)-cos(alpha)*sin(gamma);
    -sin(beta) ...
    cos(beta)*sin(gamma) ...
    cos(beta)*cos(gamma)]...
    *[0; 0; 50];

ig = [ig(1)+goal(1) ig(2)+goal(2) ig(3)+goal(3)];
jg = [jg(1)+goal(1) jg(2)+goal(2) jg(3)+goal(3)];
kg = [kg(1)+goal(1) kg(2)+goal(2) kg(3)+goal(3)];

%only for arrow:
kgarrow = [cos(alpha)*cos(beta)...
    cos(alpha)*sin(beta)*sin(gamma)-sin(alpha)*cos(gamma) ...
    cos(alpha)*sin(beta)*cos(gamma)+sin(alpha)*sin(gamma);...
    sin(alpha)*cos(beta)...
    sin(alpha)*sin(beta)*sin(gamma)+cos(alpha)*cos(gamma)...
    sin(alpha)*sin(beta)*cos(gamma)-cos(alpha)*sin(gamma);
    -sin(beta) ...
    cos(beta)*sin(gamma) ...
    cos(beta)*cos(gamma)]...
    *[0; 0; 150];
kgarrow = [kgarrow(1)+goal(1) kgarrow(2)+goal(2) kgarrow(3)+goal(3)];